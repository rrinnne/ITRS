
#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// регистр СуммаПродаж
	Движения.СуммаПродаж.Записывать = Истина;
	Движение = Движения.СуммаПродаж.Добавить();
	Движение.Период = Дата;
	Движение.Клиент = Клиент;
	Движение.Товар = Товар;
	Движение.Сумма = СуммаДокумента;
	
	Остаток = ПолучитьОстатокТовара(Товар, ТекущаяДата());

	Если Остаток < Количество Тогда
	    Отказ = Истина;	
	    Сообщить("На складе осталось всего " + Остаток + ", недостаточно товара!");
	КонецЕсли;
	
	// регистр ОстаткиТоваров
	Движения.ОстаткиТоваров.Записывать = Истина;
	Движение = Движения.ОстаткиТоваров.Добавить();
	Движение.Период = Дата;
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход;
	Движение.Номенклатура = Товар;
	Движение.Количество = Количество;
	
	НачислитьСписатьБонусныеБаллы(Отказ);

КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
        Возврат;
	КонецЕсли;
	
	ДобавитьПокупкуКлиенту();
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)

	МаксимальнаяДоля = Константы.МаксимальнаяДоляОплатыБаллами.Получить();

	СуммаПродажи = СуммаДокумента;
	
	Если БаллыКСписанию <> 0 Тогда
		
		Если БаллыКСписанию > СуммаПродажи Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = "Списываемые баллы не должны превышать сумму продажи";
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Поле = "БаллыКСписанию";
			Сообщение.Сообщить();
		КонецЕсли;
		
		Если Цена <> 0 Тогда
			Доля = БаллыКСписанию / СуммаПродажи * 100;
			Если Доля > МаксимальнаяДоля Тогда
				Отказ = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Текст = СтрШаблон("Доля списываемых баллов от суммы продажи больше допустимой (%1%%)", МаксимальнаяДоля);
				Сообщение.УстановитьДанные(ЭтотОбъект);
				Сообщение.Поле = "БаллыКСписанию";
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Клиент) Тогда
			Отказ = Истина;
			Сообщение = Новый СообщениеПользователю;
			Сообщение.Текст = СтрШаблон("Для списания баллов необходимо указать клиента");
			Сообщение.УстановитьДанные(ЭтотОбъект);
			Сообщение.Поле = "БаллыКСписанию";
			Сообщение.Сообщить();			
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьОстатокТовара(Номенклатура, ДатаПроверки) Экспорт

    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |   Остатки.Номенклатура,
    |   СУММА(Остатки.КоличествоОстаток) КАК Количество
    |ИЗ
    |   РегистрНакопления.ОстаткиТоваров.Остатки(&Дата, ) КАК Остатки
    |ГДЕ
    |   Остатки.Номенклатура = &Номенклатура
    |СГРУППИРОВАТЬ ПО
    |   Остатки.Номенклатура";

    Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
    Запрос.УстановитьПараметр("Дата", ДатаПроверки);

    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();

    Если Выборка.Следующий() Тогда
        Возврат Выборка.Количество;
    Иначе
        Возврат 0;
    КонецЕсли;

КонецФункции


Процедура ДобавитьПокупкуКлиенту()

    Если Не ЗначениеЗаполнено(Клиент) Тогда 
        Возврат;
    КонецЕсли;

    Попытка
        ОбъектКлиента = Клиент.ПолучитьОбъект();
        
        Для Каждого СтрокаИстории Из ОбъектКлиента.ИсторияПокупок Цикл
            Если СтрокаИстории.Покупка = Ссылка Тогда
                ОбъектКлиента.Записать();
                Возврат;
            КонецЕсли;
        КонецЦикла;

        НоваяСтрока = ОбъектКлиента.ИсторияПокупок.Добавить();
        НоваяСтрока.Покупка = Ссылка;
                
        ОбъектКлиента.Записать();
    Исключение
        Сообщить("Ошибка при записи в историю клиента: " + ОписаниеОшибки());
    КонецПопытки;

КонецПроцедуры

Процедура НачислитьСписатьБонусныеБаллы(Отказ)
	
	Движения.БонусныеБаллыКлиентов.Записывать = Истина;
	
	Если Не ЗначениеЗаполнено(Клиент) Тогда
		Возврат;
	КонецЕсли;
	
	СуммаПокупокКлиента = СуммаПокупокКлиента();
	
	ДоляНакапливаемыхБаллов = ДоляНакапливаемыхБаллов(СуммаПокупокКлиента);
	
	БаллыКНакоплению = СуммаДокумента * ДоляНакапливаемыхБаллов / 100;
	
	// Если есть списание баллов, то не делаем начисление
	Если БаллыКСписанию <> 0 Тогда
		
		Движение = Движения.БонусныеБаллыКлиентов.ДобавитьРасход();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Сумма = БаллыКСписанию;
		
	ИначеЕсли БаллыКНакоплению <> 0 Тогда
		
		Движение = Движения.БонусныеБаллыКлиентов.ДобавитьПриход();
		Движение.Период = Дата;
		Движение.Клиент = Клиент;
		Движение.Сумма = БаллыКНакоплению;
		
	КонецЕсли;
			
	Движения.Записать();
	
	// Проверка отрицательного баланса
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	БонусныеБаллыКлиентовОстатки.СуммаОстаток
		|ИЗ
		|	РегистрНакопления.БонусныеБаллыКлиентов.Остатки(&Период, Клиент = &Клиент) КАК БонусныеБаллыКлиентовОстатки
		|ГДЕ
		|	БонусныеБаллыКлиентовОстатки.СуммаОстаток < 0";
		
	Запрос.УстановитьПараметр("Период", Новый Граница(МоментВремени(), ВидГраницы.Включая));
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		
		Отказ = Истина;
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Текст = СтрШаблон("Не хватает баллов для списания, на балансе %1", 
			Выборка.СуммаОстаток + БаллыКСписанию);
		Сообщение.УстановитьДанные(ЭтотОбъект);
		Сообщение.Поле = "БаллыКСписанию";
		Сообщение.Сообщить();
				
	КонецЕсли;
	
КонецПроцедуры


Функция СуммаПокупокКлиента()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СуммаПродажОбороты.СуммаОборот
		|ИЗ
		|	РегистрНакопления.СуммаПродаж.Обороты(, &КонецПериода,, Клиент = &Клиент) КАК СуммаПродажОбороты";
		
	Запрос.УстановитьПараметр("КонецПериода", Новый Граница(МоментВремени(), ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("Клиент", Клиент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.СуммаОборот;
	КонецЕсли;
	
	Возврат 0;	
	
КонецФункции


Функция ДоляНакапливаемыхБаллов(СуммаПокупокКлиента)
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ
		|	ШкалаБонуснойПрограммыДиапазоны.ПроцентНакопления
		|ИЗ
		|	РегистрСведений.ШкалаБонусов.СрезПоследних(&Период,) КАК ШкалаБонусовСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.ШкалаБонуснойПрограммы.Диапазоны КАК ШкалаБонуснойПрограммыДиапазоны
		|		ПО ШкалаБонусовСрезПоследних.Шкала = ШкалаБонуснойПрограммыДиапазоны.Ссылка
		|ГДЕ
		|	ШкалаБонуснойПрограммыДиапазоны.НижняяГраница <= &СуммаПокупокКлиента
		|	И (ШкалаБонуснойПрограммыДиапазоны.ВерхняяГраница > &СуммаПокупокКлиента
		|	ИЛИ ШкалаБонуснойПрограммыДиапазоны.ВерхняяГраница = 0)";
		
	Запрос.УстановитьПараметр("СуммаПокупокКлиента", СуммаПокупокКлиента);
	Запрос.УстановитьПараметр("Период", Дата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.ПроцентНакопления;
	КонецЕсли;
	
	Возврат 0;
	
КонецФункции


#КонецОбласти